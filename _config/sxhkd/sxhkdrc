
# terminal emulator
super + Return
    $TERMINAL

super + p
    rofi -show drun

# reload sxhkd
#   If this is called too frequently, then bspwm locks up.
#   Therefore, I have implemented a 4 second delay between
#   sxhkdrc reloads
super + Escape
    time=0; \
    curtime=$(date +%s); \
    if [ -f /tmp/.sxhkd_time ]; then \
        time=$(cat /tmp/.sxhkd_time); \
    fi; \
    if [[ $(($curtime - $time)) -gt 4 ]]; then \
        pkill -USR1 -x sxhkd && notify-send 'reloaded sxhkdrc'; \
        printf $curtime > /tmp/.sxhkd_time; \
    else \
        notify-send "Wait $((4 - $curtime + $time)) seconds"; \
    fi

# restart bspwm
# > ditto above
super + shift + Escape
	time=0; \
    curtime=$(date +%s); \
    if [ -f /tmp/.bspwm_time ]; then \
        time=$(cat /tmp/.bspwm_time); \
    fi; \
    if [[ $(($curtime - $time)) -gt 4 ]]; then \
        $HOME/.config/bspwm/bspwmrc && notify-send 'bspwm restarted' && \
        printf $curtime > /tmp/.bspwm_time || notify-send 'bspwm failed to restart'; \
    else \
        notify-send "Wait $((4 - $curtime + $time)) seconds"; \
    fi

# toggle bspwm (top) polybar
super + shift + p
    if [[ $(bspc config top_padding) -eq 0 ]]; then echo cmd:show > /tmp/ipc-polybar-bspwm; bspc config top_padding 32; else echo cmd:hide > /tmp/ipc-polybar-bspwm; bspc config top_padding 0; fi

# restart polybar
super + alt + p
    polybar-msg cmd restart

# show pkgs
super + ctrl + p
	sh -c '$HOME/.config/polybar/pkgclick.sh'

# quit bspwm normally
super + ctrl + BackSpace
    bspc quit

# close and kill
super + {_,shift + }q
    bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
    bspc desktop -l next

# if the current node is automatic, send it to the last manual, otherwise pull the last leaf
super + y
    bspc query -N -n focused.automatic && bspc node -n last.!automatic || bspc node last.leaf -n focused

# swap the current node and the biggest node
super + {_,shift +}g
    bspc node -s biggest{.active,_}

#
# state/flags
#

# set the window state
super + {t,s,f}
    bspc node -t '~{tiled,floating,fullscreen}'

# set the node flags
super + ctrl + {x,y,z}
    bspc node -g {locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
    bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {a,b,comma,period}
    bspc node -f @{parent,brother,first,second}

# focus the next/previous node
super + {_,shift + }c
    bspc node -f {next,prev}

# rotate (circulate)
super + {_,shift + }r
    bspc node -R {90,-90}

super + equal
    bspc node -E

super + shift + equal
    bspc node -B

super + shift + bracket{left,right}
    bg_switch {prev,next} dark

# focus the next/previous desktop
super + bracket{left,right}
    bspc desktop -f {prev,next}

# focus the last node/desktop
super + {grave,Tab}
    bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
    bspc wm -h off; \
    bspc node {older,newer} -f; \
    bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
    bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
    bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# resize tiled/floating
#

# expand the tiled space in the given direction
super + alt + {h,j,k,l}
    bspc node {@west -r -2,@south -r +2,@north -r -2,@east -r +2}

super + ctrl + alt + {h,j,k,l}
    bspc node {@west -r -10,@south -r +10,@north -r -10,@east -r +10}

# contract the tiled space in the given direction
super + alt + shift + {h,j,k,l}
    bspc node {@east -r -2,@north -r +2,@south -r -2,@west -r +2}

super + ctrl + alt + shift + {h,j,k,l}
    bspc node {@east -r -10,@north -r +10,@south -r -10,@west -r +10}

# move a floating window
# super + {Left,Down,Up,Right}
super + ctrl + {Left,Down,Up,Right}
    xdo move {-x -2,-y +2,-y -2,-x +2}

super + alt + {Right,Down}
    xdo resize {-w +2,-h +2}

super + alt + {Left,Up}
    {xdo move -x -2 & xdo resize -w +2,xdo move -y -2 & xdo resize -h +2}

super + alt + shift + {Left,Up}
    xdo resize {-w -2,-h -2}

super + alt + shift + {Right,Down}
    {xdo move -x +2 && xdo resize -w -2,xdo move -y +2 && xdo resize -h -2}

alt + ctrl + {j,k,m}
    vol -N{d,i,t,t}

alt + ctrl + {u,i,o,p}
    light -{S 0,U 5,A 5,S 100}

alt + ctrl + r
    pkill -USR1 -x redshift

# {fullscreen, select, current window} screenshot
{Print,shift + Print,ctrl + Print}
    mkdir -p ~/Pictures; f="$HOME/Pictures/Screenshot from $(date +'%Y-%m-%d %H:%M:%S').png"; maim {-q,-qusko,-qui $(xdotool getactivewindow)} "$f" && notify-send 'screenshot' "saved to $f" || notify -send 'screenshot' "error with 'maim $f'"

super + shift + BackSpace
    slock

super + shift + m
    ~/scripts/toggletouchpad_libinput.sh

super + alt + s
    pgrep screenkey && pkill screenkey || screenkey --ignore Caps_Lock

# vim: ft=config et ts=4 sw=4 sts=4
